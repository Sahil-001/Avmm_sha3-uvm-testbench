`include "avl_seq_item.sv"
class avl_driver #(int DW = 32, int AW = 32) extends uvm_driver #(avl_seq_item);
   int BW ;
   avl_seq_item #(DW,AW) tr,req ;
   virtual avmm_int vif;
   `uvm_component_utils(avl_driver);
   
   function new(string name = "avl_driver", uvm_component parent = null);
      super.new(name,parent);
      BW = DW/8;
   endfunction // new


   virtual function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      vif = sha3_top.d_int;
   endfunction // build_phase
   
   

   virtual task run_phase(uvm_phase phase);
      begin
	 super.run_phase(phase);
	 while(1)
	   begin
	      seq_item_port.get_next_item(req);
	      `uvm_info("AVL TRANSACTION", req.sprint(), UVM_DEBUG);
	      drive_int(req); //sending req to interface
	      seq_item_port.item_done();
	   end
      end
      
   endtask // run_phase

   task write(input [7:0]  addr,
	      input [31:0] data);
      begin
	 @(vif.cb_driver);
	 begin
	    vif.avs_s0_address = addr;
	    vif.avs_s0_writedata = data;
	    vif.avs_s0_write = 1;
	    vif.avs_s0_read = 0;
	    // avs_s0_chipselect = 0;
	 end
      end
   endtask // write

   task drive_int(avl_seq_item req);
       initial begin: bfm
      reg [9:0]  addr;
      reg [31:0] data;
      reg [3:0]  strb;
      reg 	 flag;
      #200;
      @(posedge clk);
      forever begin
	 while (reset == 1'b1) begin
	    @(posedge clk);
	 end // while (reset == 1'b1)
	 
	 case ($avl_try_next_item(req.addr,req.strb, req.data, req.typ))
	   0: begin: valid_transaction
	      if (req.typ == 1) begin	// write
		 write (req.addr, req.data);
	      end // if (flag == 1)
	      else begin
		 read (req.addr);
	      end
	      while (vif.avs_s0_waitrequest) begin
		 @(vif.cb_driver);
	      end
	      @(vif.cb_driver);
	      if ( == 0) data = avs_s0_readdata;
	      avs_s0_address = 'bX;
	      avs_s0_read = 0;
	      avs_s0_writedata = 'bX;
	      avs_s0_write = 0;
	      // avs_s0_chipselect = 0;
	      if ($avl_item_done(0) != 0) ; // $finish;
	      if ($avl_put(addr, strb, data, flag) != 0) begin
		 // $finish;
	      end
	   end // block: valid_tr
	   default: begin: idle_transaction
	      @(negedge clk);
	      avs_s0_read = 1'b0;
	      avs_s0_write = 1'b0;
	      @(posedge clk);
	   end
	   // default: ; // $finish;
	 endcase
	 
      end // forever begin
   end // initial begin
  
   endtask // drive_int
   
      


  
endclass // avl_driver
